{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../chevron.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction FormComponent_span_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1, \"The name is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormComponent_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1, \"The address is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction FormComponent_span_19_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 10);\n    i0.ɵɵtext(1, \"The email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class FormComponent {\n  constructor(service) {\n    this.service = service;\n    this.ourform = new FormGroup({\n      name: new FormControl(\"\", [Validators.required, Validators.minLength(10)]),\n      address: new FormControl(\"\", Validators.required),\n      email: new FormControl(\"\", [Validators.required, Validators.email])\n    });\n    this.service.GetPerson().subscribe(res => {\n      console.log(res);\n    });\n  }\n  // arr: any = [\n  //   {\n  //     name: \"danish\",\n  //     address: \"kashmir\",\n  //     email: \"\"\n  //   },\n  //   {\n  //     name: \"umer\",\n  //     address: \"kashmir\",\n  //     email: \"\"\n  //   }\n  // ]\n  submitform() {\n    const data = {\n      name: this.ourform.value.name,\n      address: this.ourform.value.address,\n      email: this.ourform.value.email\n    };\n    this.service.AddPerson(data).subscribe(res => {\n      console.log(res);\n      console.log(\"submitted successfully\");\n    });\n    // this.arr.push(data);\n    // console.log(this.arr);\n  }\n}\n\nFormComponent.ɵfac = function FormComponent_Factory(t) {\n  return new (t || FormComponent)(i0.ɵɵdirectiveInject(i1.ChevronService));\n};\nFormComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: FormComponent,\n  selectors: [[\"app-form\"]],\n  decls: 25,\n  vars: 5,\n  consts: [[1, \"container\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"row\"], [1, \"col-md-4\"], [\"type\", \"text\", \"formControlName\", \"name\", 1, \"form-control\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"address\", 1, \"form-control\"], [\"type\", \"text\", \"formControlName\", \"email\", 1, \"form-control\"], [1, \"col-md-12\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [1, \"text-danger\"]],\n  template: function FormComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"form works!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\", 0)(3, \"form\", 1);\n      i0.ɵɵlistener(\"ngSubmit\", function FormComponent_Template_form_ngSubmit_3_listener() {\n        return ctx.submitform();\n      });\n      i0.ɵɵelementStart(4, \"div\", 2)(5, \"div\", 3)(6, \"span\");\n      i0.ɵɵtext(7, \"Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(8, \"input\", 4);\n      i0.ɵɵtemplate(9, FormComponent_span_9_Template, 2, 0, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 3)(11, \"span\");\n      i0.ɵɵtext(12, \" Address \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 6);\n      i0.ɵɵtemplate(14, FormComponent_span_14_Template, 2, 0, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 3)(16, \"span\");\n      i0.ɵɵtext(17, \" Email \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 7);\n      i0.ɵɵtemplate(19, FormComponent_span_19_Template, 2, 0, \"span\", 5);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelement(20, \"br\");\n      i0.ɵɵelementStart(21, \"div\", 2)(22, \"div\", 8)(23, \"button\", 9);\n      i0.ɵɵtext(24, \"Register\");\n      i0.ɵɵelementEnd()()()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"formGroup\", ctx.ourform);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", ctx.ourform.controls.name.invalid && ctx.ourform.controls.name.touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.ourform.controls.address.invalid && ctx.ourform.controls.address.touched);\n      i0.ɵɵadvance(5);\n      i0.ɵɵproperty(\"ngIf\", ctx.ourform.controls.email.invalid && ctx.ourform.controls.email.touched);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"disabled\", ctx.ourform.invalid);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["FormControl","FormGroup","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","FormComponent","constructor","service","ourform","name","required","minLength","address","email","GetPerson","subscribe","res","console","log","submitform","data","value","AddPerson","ɵɵdirectiveInject","i1","ChevronService","selectors","decls","vars","consts","template","FormComponent_Template","rf","ctx","ɵɵlistener","FormComponent_Template_form_ngSubmit_3_listener","ɵɵelement","ɵɵtemplate","FormComponent_span_9_Template","FormComponent_span_14_Template","FormComponent_span_19_Template","ɵɵadvance","ɵɵproperty","controls","invalid","touched"],"sources":["/Users/saquibmanzoor/Desktop/chevronappangular/angularapp/src/app/form/form.component.ts","/Users/saquibmanzoor/Desktop/chevronappangular/angularapp/src/app/form/form.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { ChevronService } from '../chevron.service';\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent {\n  constructor(private service: ChevronService) {\n    this.service.GetPerson().subscribe(res => {\n      console.log(res);\n    })\n  }\n  ourform = new FormGroup({\n    name: new FormControl(\"\", [Validators.required, Validators.minLength(10)]),\n    address: new FormControl(\"\", Validators.required),\n    email: new FormControl(\"\", [Validators.required, Validators.email])\n  })\n  // arr: any = [\n  //   {\n  //     name: \"danish\",\n  //     address: \"kashmir\",\n  //     email: \"\"\n  //   },\n  //   {\n  //     name: \"umer\",\n  //     address: \"kashmir\",\n  //     email: \"\"\n  //   }\n  // ]\n  submitform() {\n    const data = {\n      name: this.ourform.value.name,\n      address: this.ourform.value.address,\n      email: this.ourform.value.email\n    }\n    this.service.AddPerson(data).subscribe(res => {\n      console.log(res);\n      console.log(\"submitted successfully\");\n    })\n\n    // this.arr.push(data);\n    // console.log(this.arr);\n  }\n\n}\n","<p>form works!</p>\n<div class=\"container\">\n    <form [formGroup]=\"ourform\" (ngSubmit)=\"submitform()\">\n        <div class=\"row\">\n            <div class=\"col-md-4\">\n                <span>Name</span>\n                <input type=\"text\" class=\"form-control\" formControlName=\"name\">\n                <span class=\"text-danger\"\n                    *ngIf=\"this.ourform.controls.name.invalid && this.ourform.controls.name.touched\">The name is\n                    required</span>\n            </div>\n            <div class=\"col-md-4\">\n                <span>\n                    Address\n                </span>\n                <input type=\"text\" class=\"form-control\" formControlName=\"address\">\n                <span class=\"text-danger\"\n                    *ngIf=\"this.ourform.controls.address.invalid && this.ourform.controls.address.touched\">The address\n                    is\n                    required</span>\n            </div>\n            <div class=\"col-md-4\">\n                <span>\n                    Email\n                </span>\n                <input type=\"text\" class=\"form-control\" formControlName=\"email\">\n                <span class=\"text-danger\"\n                    *ngIf=\"this.ourform.controls.email.invalid && this.ourform.controls.email.touched\">The email is\n                    required</span>\n            </div>\n        </div><br>\n        <div class=\"row\">\n            <div class=\"col-md-12\">\n                <button type=\"submit\" [disabled]=\"this.ourform.invalid\" class=\"btn btn-primary\">Register</button>\n            </div>\n        </div>\n\n    </form>\n\n\n    <!-- <table class=\"table\">\n        <thead>\n            <tr>\n                <th>Name</th>\n\n\n                <th>Address</th>\n            </tr>\n\n        </thead>\n        <tbody>\n            <tr *ngFor=\"let x of arr\">\n                <td>{{x.name}}</td>\n                <td>{{x.address}}</td>\n            </tr>\n        </tbody>\n    </table> -->\n\n</div>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}